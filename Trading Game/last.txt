using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace Trading_Game
{
    public partial class Form1 : Form
    {
        private readonly Random rand = new Random();
        private Timer timer;
        private double lastPrice = 100;
        private int stocksOwned = 0;
        private double wallet = 10000;
        private double initialWallet;
        private readonly Queue<(DateTime Time, double Price)> priceHistory = new Queue<(DateTime, double)>();
        private List<StockTrade> boughtStockTrades = new List<StockTrade>();
        private readonly string TradesFileName = Path.Combine(Directory.GetCurrentDirectory(), "trades.json");
        private readonly string PriceHistoryFileName = Path.Combine(Directory.GetCurrentDirectory(), "priceHistory.json");
        private int lastDirection = 0;
        private double momentumProbability = 40.05;

        public Form1()
        {
            InitializeComponent();
            SetupSplineChart();
            SetupChart2();
            InitializeTimer();
            initialWallet = wallet;
            Console.WriteLine($"Expected trades file path: {TradesFileName}");
            if (File.Exists(TradesFileName))
            {
                Console.WriteLine($"Trades file exists at {TradesFileName}. Attempting to load...");
                LoadTradesIntoMemory();
            }
            else
            {
                Console.WriteLine($"Trades file not found at {TradesFileName}. Starting with empty trades.");
            }
            LoadPriceHistory();
            UpdateAllLabels();
            AttachButtonHandlers();
        }

        private void InitializeTimer()
        {
            timer = new Timer();
            timer.Interval = 200;
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        private void AttachButtonHandlers()
        {
            btn_buy.Click += btn_buy_Click;
            BTN_SELL.Click += BTN_SELL_Click;
            btb_buy_10_stocks.Click += btb_buy_10_stocks_Click;
            btb_buy_100_stocks.Click += btb_buy_100_stocks_Click;
            btb_buy_1000_stocks.Click += btb_buy_1000_stocks_Click;
            btb_sell_10_stocks.Click += btb_sell_10_stocks_Click;
            btb_sell_100_stocks.Click += btb_sell_100_stocks_Click;
            btb_sell_1000_stocks.Click += btb_sell_1000_stocks_Click;
            btn_sell_max_stocks_i_can_sell.Click += btn_sell_max_stocks_i_can_sell_Click;
            btn_buy_max_stocks_i_can_buy.Click += btn_buy_max_stocks_i_can_buy_Click;
        }

        private void btn_buy_Click(object sender, EventArgs e) => BuyStocks(1);
        private void BTN_SELL_Click(object sender, EventArgs e) => SellStocks(1);
        private void btb_buy_10_stocks_Click(object sender, EventArgs e) => BuyStocks(10);
        private void btb_buy_100_stocks_Click(object sender, EventArgs e) => BuyStocks(100);
        private void btb_buy_1000_stocks_Click(object sender, EventArgs e) => BuyStocks(1000);
        private void btb_sell_10_stocks_Click(object sender, EventArgs e) => SellStocks(10);
        private void btb_sell_100_stocks_Click(object sender, EventArgs e) => SellStocks(100);
        private void btb_sell_1000_stocks_Click(object sender, EventArgs e) => SellStocks(1000);

        private void SetupSplineChart()
        {
            chart1.Series.Clear();
            chart1.ChartAreas.Clear();
            ChartArea chartArea = new ChartArea("MainArea");
            chart1.ChartAreas.Add(chartArea);
            Series series = new Series("Price")
            {
                ChartType = SeriesChartType.Spline,
                XValueType = ChartValueType.DateTime,
                Color = Color.Black
            };
            chart1.Series.Add(series);
        }

        private void SetupChart2()
        {
            chart2.Series.Clear();
            chart2.ChartAreas.Clear();
            ChartArea chartArea = new ChartArea("SecondaryArea");
            chart2.ChartAreas.Add(chartArea);
            Series series = new Series("HistoricalPrices")
            {
                ChartType = SeriesChartType.Spline,
                XValueType = ChartValueType.DateTime,
                Color = Color.Blue
            };
            chart2.Series.Add(series);
        }

        private void Timer_Tick(object sender, EventArgs e) => PushRandomData();

        private void PushRandomData()
        {
            DateTime now = DateTime.Now;
            double timeFactor = 0.02 * Math.Sin(now.TimeOfDay.TotalSeconds * Math.PI / 60); // Slower cyclical effect
            double baseDrift = 0.0002; // Small consistent upward bias
            int chance = rand.Next(100);
            int direction;
            double volatility = 0.015 + (rand.NextDouble() * 0.01); // Dynamic volatility between 1.5% and 2.5%

            // Enforce bounce back at 5 or under, cap at 1,000,000
            if (lastPrice <= 5)
            {
                direction = 1; // Force upward movement
                momentumProbability = 0.65; // Moderate momentum for recovery
            }
            else if (lastPrice >= 1000000)
            {
                direction = -1; // Force downward movement
                momentumProbability = 0.65; // Moderate momentum for correction
            }
            else
            {
                // Momentum-based direction with trend influence
                if (momentumProbability > rand.NextDouble() && lastDirection != 0)
                {
                    direction = lastDirection;
                }
                else
                {
                    direction = rand.Next(2) == 0 ? 1 : -1;
                }
                momentumProbability = direction == lastDirection ? Math.Min(momentumProbability * 1.1, 0.8) : 0.4;
            }

            lastDirection = direction;

            double percentChange;
            if (lastPrice <= 145)
            {
                // Gradual recovery to avoid large jumps
                if (chance < 80)
                    percentChange = 0.10; // 20% chance for a 10% recovery
                else if (chance < 8)
                    percentChange = 0.05; // 8% chance for a 5% recovery
                else if (chance < 15)
                    percentChange = 0.02; // 15% chance for a 2% recovery
                else
                    percentChange = 0.005 + rand.NextDouble() * 0.015; // 75% chance for a 0.5-2% recovery
            }
            else if (lastPrice >= 1990000)
            {
                // Controlled downward correction
                if (chance < 2)
                    percentChange = -0.10; // 2% chance for a 10% drop
                else if (chance < 10)
                    percentChange = -0.05; // 8% chance for a 5% drop
                else if (chance < 25)
                    percentChange = -0.02; // 15% chance for a 2% drop
                else
                    percentChange = -(0.005 + rand.NextDouble() * 0.015); // 75% chance for a 0.5-2% drop
            }
            else
            {
                // Normal price fluctuation with dynamic volatility
                if (chance < 2)
                    percentChange = direction * 0.15; // 2% chance for a larger move (15%)
                else if (chance < 10)
                    percentChange = direction * 0.075; // 8% chance for a medium move (7.5%)
                else if (chance < 25)
                    percentChange = direction * 0.03; // 15% chance for a small move (3%)
                else
                    percentChange = direction * (volatility * rand.NextDouble()); // 75% chance for a variable move (0-2.5%)
            }

            percentChange += baseDrift + timeFactor;
            double price = lastPrice * (1 + percentChange);
            lastPrice = Math.Max(price, 1);

            int pointIndex = chart1.Series["Price"].Points.AddXY(now, lastPrice);
            chart1.Series["Price"].Points[pointIndex].Color = direction > 0 ? Color.Green : Color.Red;

            if (chart1.Series["Price"].Points.Count > 100)
                chart1.Series["Price"].Points.RemoveAt(0);

            ChartArea area1 = chart1.ChartAreas["MainArea"];
            area1.AxisX.Minimum = chart1.Series["Price"].Points[0].XValue;
            area1.AxisX.Maximum = chart1.Series["Price"].Points[chart1.Series["Price"].Points.Count - 1].XValue;
            area1.AxisY.Minimum = Math.Max(0, lastPrice * 0.95); // Dynamic Y-axis scaling
            area1.AxisY.Maximum = lastPrice * 1.05;

            lbl_how_much_wortyh.Text = lastPrice.ToString("C2");

            priceHistory.Enqueue((now, lastPrice));
            if (priceHistory.Count > 1000)
                priceHistory.Dequeue();

            chart2.Series["HistoricalPrices"].Points.Clear();
            foreach (var (time, priceVal) in priceHistory)
                chart2.Series["HistoricalPrices"].Points.AddXY(time, priceVal);

            double maxPrice = priceHistory.Max(p => p.Price);
            ChartArea area2 = chart2.ChartAreas["SecondaryArea"];
            area2.AxisY.Minimum = 0;
            area2.AxisY.Maximum = maxPrice * 1.05; // Slightly more padding
            area2.AxisX.Minimum = priceHistory.Peek().Time.ToOADate();
            area2.AxisX.Maximum = priceHistory.Last().Time.ToOADate();

            SavePriceHistory();
            UpdateAllLabels();
        }

        private void UpdateAllLabels()
        {
            lbl_how_many_i_have_bought.Text = "Owned: " + stocksOwned;
            double worth = stocksOwned * lastPrice;
            LBL_HOW_MUCH_THEY_WORTH.Text = "Worth: " + worth.ToString("C2");
            double total = wallet + worth;
            double percentage = (total / initialWallet) * 100;

            lbl_wallet.Text = total.ToString("C2");
            lbl_nmy_score_gain_or_loss.Text = percentage.ToString("F2") + "%";
            Color color = total >= initialWallet ? Color.Green : Color.Red;
            lbl_wallet.ForeColor = color;
            lbl_nmy_score_gain_or_loss.ForeColor = color;
            lbl_my_wallet_wrth.ForeColor = color;
            lbl_my_wallet_wrth.Text = total.ToString("C2");
            lbl_my_shares_worth.Text = worth.ToString("C2");
        }

        private void BuyStocks(int count)
        {
            double cost = count * lastPrice;
            if (wallet < cost)
            {
                MessageBox.Show($"Insufficient funds to buy {count} stocks.", "Warning");
                return;
            }

            wallet -= cost;
            stocksOwned += count;

            List<StockTrade> trades = LoadTrades();
            var existingTrade = trades.FirstOrDefault(t => !t.ProfitLoss.HasValue && Math.Abs(t.Price - lastPrice) < 0.0001);

            if (existingTrade != null)
            {
                existingTrade.AmountOfStocks += count;
                if (DateTime.Now < existingTrade.InTime)
                    existingTrade.InTime = DateTime.Now;
            }
            else
            {
                StockTrade trade = new StockTrade
                {
                    UUID = Guid.NewGuid().ToString(),
                    Price = lastPrice,
                    AmountOfStocks = count,
                    InTime = DateTime.Now
                };
                trades.Add(trade);
                boughtStockTrades.Add(trade);
            }

            SaveTrades(trades);
            LoadTradesIntoMemory();
            UpdateAllLabels();
        }

        private void SellStocks(int count)
        {
            if (stocksOwned < count)
            {
                MessageBox.Show($"Not enough stocks to sell {count}.", "Warning");
                return;
            }

            stocksOwned -= count;
            wallet += count * lastPrice;

            List<StockTrade> trades = LoadTrades();
            int stocksToSell = count;
            var openTrades = trades.Where(t => !t.ProfitLoss.HasValue).OrderBy(t => t.InTime).ToList();

            foreach (var trade in openTrades)
            {
                if (stocksToSell <= 0)
                    break;

                int sellAmount = Math.Min(trade.AmountOfStocks, stocksToSell);

                if (sellAmount == trade.AmountOfStocks)
                {
                    trade.AmountOfStocks = 0;
                    trade.OutTime = DateTime.Now;
                    trade.ProfitLoss = (lastPrice - trade.Price) * sellAmount;
                }
                else
                {
                    trade.AmountOfStocks -= sellAmount;
                    StockTrade closedTrade = new StockTrade
                    {
                        UUID = Guid.NewGuid().ToString(),
                        Price = trade.Price,
                        AmountOfStocks = sellAmount,
                        InTime = trade.InTime,
                        OutTime = DateTime.Now,
                        ProfitLoss = (lastPrice - trade.Price) * sellAmount
                    };
                    trades.Add(closedTrade);
                }

                stocksToSell -= sellAmount;
            }

            trades.RemoveAll(t => t.AmountOfStocks == 0 && t.ProfitLoss == null);
            SaveTrades(trades);
            LoadTradesIntoMemory();
            UpdateAllLabels();
        }

        private void LoadTradesIntoMemory()
        {
            var trades = LoadTrades();
            boughtStockTrades = trades.Where(t => !t.ProfitLoss.HasValue && t.AmountOfStocks > 0).ToList();
            stocksOwned = boughtStockTrades.Sum(t => t.AmountOfStocks);
            // Recalculate wallet based on total spent and earned
            double totalSpent = trades.Where(t => t.AmountOfStocks > 0 || t.ProfitLoss.HasValue)
                                     .Sum(t => t.Price * t.AmountOfStocks);
            double totalEarned = trades.Where(t => t.ProfitLoss.HasValue)
                                      .Sum(t => t.ProfitLoss ?? 0);
            wallet = initialWallet - totalSpent + totalEarned;
            Console.WriteLine($"Loaded {boughtStockTrades.Count} open trades, total stocks owned: {stocksOwned}, wallet: {wallet:C2}");
        }

        private List<StockTrade> LoadTrades()
        {
            if (!File.Exists(TradesFileName))
            {
                Console.WriteLine($"No trades file found at {TradesFileName}. Returning empty list.");
                return new List<StockTrade>();
            }

            try
            {
                string json = File.ReadAllText(TradesFileName);
                Console.WriteLine($"Reading trades from {TradesFileName}. JSON length: {json.Length} characters.");
                Console.WriteLine($"JSON content: {json.Substring(0, Math.Min(json.Length, 200))}..."); // Log first 200 chars

                if (string.IsNullOrWhiteSpace(json) || json == "[]")
                {
                    Console.WriteLine("Trades file is empty or contains an empty array.");
                    return new List<StockTrade>();
                }

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new JsonStringEnumConverter() },
                    AllowTrailingCommas = true,
                    ReadCommentHandling = JsonCommentHandling.Skip
                };
                var trades = JsonSerializer.Deserialize<List<StockTrade>>(json, options);

                if (trades == null)
                {
                    Console.WriteLine("Deserialization returned null. Returning empty list.");
                    return new List<StockTrade>();
                }

                // Validate trades
                foreach (var trade in trades)
                {
                    Console.WriteLine($"Loaded trade: UUID={trade.UUID}, Price={trade.Price}, Stocks={trade.AmountOfStocks}, InTime={trade.InTime}, OutTime={trade.OutTime}, ProfitLoss={trade.ProfitLoss}");
                }

                Console.WriteLine($"Successfully deserialized {trades.Count} trades.");
                return trades;
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"JSON deserialization error for trades: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to load trades: {ex.Message}", "Error");
                return new List<StockTrade>();
            }
            catch (IOException ex)
            {
                Console.WriteLine($"File I/O error for trades: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to access trades file: {ex.Message}", "Error");
                return new List<StockTrade>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Unexpected error loading trades: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Unexpected error loading trades: {ex.Message}", "Error");
                return new List<StockTrade>();
            }
        }

        private void SaveTrades(List<StockTrade> trades)
        {
            try
            {
                var options = new JsonSerializerOptions { WriteIndented = true };
                string json = JsonSerializer.Serialize(trades, options);
                string directory = Path.GetDirectoryName(TradesFileName);
                if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }
                File.WriteAllText(TradesFileName, json);
                Console.WriteLine($"Saved {trades.Count} trades to: {TradesFileName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving trades: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to save trades: {ex.Message}", "Error");
            }
        }

        private void LoadPriceHistory()
        {
            if (!File.Exists(PriceHistoryFileName))
            {
                Console.WriteLine($"No price history file found at {PriceHistoryFileName}. Starting with empty history.");
                return;
            }

            try
            {
                string json = File.ReadAllText(PriceHistoryFileName);
                Console.WriteLine($"Reading price history from {PriceHistoryFileName}. JSON length: {json.Length} characters.");

                if (string.IsNullOrWhiteSpace(json) || json == "[]")
                {
                    Console.WriteLine("Price history file is empty or contains an empty array.");
                    return;
                }

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    AllowTrailingCommas = true,
                    ReadCommentHandling = JsonCommentHandling.Skip
                };
                var history = JsonSerializer.Deserialize<List<(DateTime Time, double Price)>>(json, options);
                if (history != null)
                {
                    priceHistory.Clear();
                    foreach (var entry in history.Take(1000)) // Limit to 1000 entries
                    {
                        priceHistory.Enqueue(entry);
                    }
                    if (history.Any())
                    {
                        lastPrice = history.Last().Price; // Set lastPrice to the most recent price
                    }
                    Console.WriteLine($"Loaded {priceHistory.Count} price history entries.");
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"JSON deserialization error for price history: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to load price history: {ex.Message}", "Error");
            }
            catch (IOException ex)
            {
                Console.WriteLine($"File I/O error for price history: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to access price history file: {ex.Message}", "Error");
            }
        }

        private void SavePriceHistory()
        {
            try
            {
                var options = new JsonSerializerOptions { WriteIndented = true };
                string json = JsonSerializer.Serialize(priceHistory.ToList(), options);
                string directory = Path.GetDirectoryName(PriceHistoryFileName);
                if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }
                File.WriteAllText(PriceHistoryFileName, json);
                Console.WriteLine($"Saved {priceHistory.Count} price history entries to: {PriceHistoryFileName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving price history: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"Failed to save price history: {ex.Message}", "Error");
            }
        }

        private void btn_buy_max_stocks_i_can_buy_Click(object sender, EventArgs e)
        {
            int maxStocks = (int)(wallet / lastPrice);
            BuyStocks(maxStocks);
        }

        private void btn_sell_max_stocks_i_can_sell_Click(object sender, EventArgs e)
        {
            SellStocks(stocksOwned);
        }
    }

    public class StockTrade
    {
        public string UUID { get; set; } = string.Empty;
        public double Price { get; set; }
        [JsonPropertyName("amount of stocks")]
        public int AmountOfStocks { get; set; }
        public DateTime InTime { get; set; }
        public DateTime? OutTime { get; set; }
        public double? ProfitLoss { get; set; }
    }
}